use super::BTreePageID;
use crate::storage::table_schema::TableSchema;

pub trait BTreePage {
    fn new(pid: &BTreePageID, bytes: &[u8], schema: &TableSchema) -> Self
    where
        Self: Sized;

    fn get_pid(&self) -> BTreePageID;

    fn get_parent_pid(&self) -> BTreePageID;
    fn set_parent_pid(&mut self, pid: &BTreePageID);

    /// Generates a byte array representing the contents of this page.
    /// Used to serialize this page to disk.
    ///
    /// The invariant here is that it should be possible to pass the
    /// byte array generated by get_page_data to the BTreePage
    /// constructor and have it produce an identical BTreeLeafPage
    /// object.
    ///
    /// # Returns
    /// A byte array representing the contents of this page.
    fn get_page_data(&self, table_schema: &TableSchema) -> Vec<u8>;

    /// Set the before image of this page to the current state of the page.
    fn set_before_image(&mut self, table_schema: &TableSchema);

    /// Provide a representation of this page before any modifications
    /// were made to it. Used by recovery.
    fn get_before_image(&self, table_schema: &TableSchema) -> Vec<u8>;
}

/// A trait that involves all the debug methods for a page. All page
/// types must implement this trait. All methods in this trait must
/// be read-only.
pub(crate) trait PageDebug: std::fmt::Debug {}
